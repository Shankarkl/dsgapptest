Object.extend(Function.prototype, {
    getArguments: function () {
        var a = [];
        for (var b = 0; b < this.arguments.length; b++) {
            a.push(this.arguments[b])
        }
        return a
    }
}, false);
var MS = {
    Browser: {}
};
Object.extend(MS.Browser, {
    isIE: navigator.userAgent.indexOf("MSIE") != -1,
    isFirefox: navigator.userAgent.indexOf("Firefox") != -1,
    isOpera: window.opera != null
}, false);
var AjaxPro = {};
AjaxPro.IFrameXmlHttp = function () {};
AjaxPro.IFrameXmlHttp.prototype = {
    onreadystatechange: null,
    headers: [],
    method: "POST",
    url: null,
    async: true,
    iframe: null,
    status: 0,
    readyState: 0,
    responseText: null,
    abort: function () {},
    readystatechanged: function () {
        var a = this.iframe.contentDocument || this.iframe.document;
        if (a != null && a.readyState == "complete" && a.body != null && a.body.res != null) {
            this.status = 200;
            this.statusText = "OK";
            this.readyState = 4;
            this.responseText = a.body.res;
            this.onreadystatechange();
            return
        }
        setTimeout(this.readystatechanged.bind(this), 10)
    },
    open: function (a, b, c) {
        if (c == false) {
            alert("Synchronous call using IFrameXMLHttp is not supported.");
            return
        }
        if (this.iframe == null) {
            var d = "hans";
            if (document.createElement && document.documentElement && (window.opera || navigator.userAgent.indexOf("MSIE 5.0") == -1)) {
                var e = document.createElement("iframe");
                e.setAttribute("id", d);
                e.style.visibility = "hidden";
                e.style.position = "absolute";
                e.style.width = e.style.height = e.borderWidth = "0px";
                this.iframe = document.getElementsByTagName("body")[0].appendChild(e)
            } else {
                if (document.body && document.body.insertAdjacentHTML) {
                    document.body.insertAdjacentHTML("beforeEnd", '<iframe name="' + d + '" id="' + d + '" style="border:1px solid black;display:none"></iframe>')
                }
            } if (window.frames && window.frames[d]) {
                this.iframe = window.frames[d]
            }
            this.iframe.name = d;
            this.iframe.document.open();
            this.iframe.document.write("<html><body></body></html>");
            this.iframe.document.close()
        }
        this.method = a;
        this.url = b;
        this.async = c
    },
    setRequestHeader: function (a, b) {
        for (var c = 0; c < this.headers.length; c++) {
            if (this.headers[c].name == a) {
                this.headers[c].value = b;
                return
            }
        }
        this.headers.push({
            name: a,
            value: b
        })
    },
    getResponseHeader: function (a, b) {
        return null
    },
    addInput: function (a, b, c, d) {
        var e;
        var f = "input";
        if (d.indexOf("\n") >= 0) {
            f = "textarea"
        }
        if (a.all) {
            e = a.createElement("<" + f + ' name="' + c + '" />')
        } else {
            e = a.createElement(f);
            e.setAttribute("name", c)
        }
        e.setAttribute("value", d);
        b.appendChild(e);
        e = null
    },
    send: function (a) {
        if (this.iframe == null) {
            return
        }
        var b = this.iframe.contentDocument || this.iframe.document;
        var c = b.createElement("form");
        b.body.appendChild(c);
        c.setAttribute("action", this.url);
        c.setAttribute("method", this.method);
        c.setAttribute("enctype", "application/x-www-form-urlencoded");
        for (var d = 0; d < this.headers.length; d++) {
            switch (this.headers[d].name.toLowerCase()) {
            case "content-length":
            case "accept-encoding":
            case "content-type":
                break;
            default:
                this.addInput(b, c, this.headers[d].name, this.headers[d].value)
            }
        }
        this.addInput(b, c, "data", a);
        c.submit();
        setTimeout(this.readystatechanged.bind(this), 0)
    }
};
var progids = ["Msxml2.XMLHTTP.6.0", "Msxml2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
var progid = null;
if (typeof ActiveXObject != "undefined") {
    var ie7xmlhttp = false;
    if (typeof XMLHttpRequest == "object") {
        try {
            var o = new XMLHttpRequest;
            ie7xmlhttp = true
        } catch (e) {}
    }
    if (typeof XMLHttpRequest == "undefined" || !ie7xmlhttp) {
        XMLHttpRequest = function () {
            var a = null;
            if (!AjaxPro.noActiveX) {
                if (progid != null) {
                    return new ActiveXObject(progid)
                }
                for (var b = 0; b < progids.length && a == null; b++) {
                    try {
                        a = new ActiveXObject(progids[b]);
                        progid = progids[b]
                    } catch (c) {}
                }
            }
            if (a == null && MS.Browser.isIE) {
                return new AjaxPro.IFrameXmlHttp
            }
            return a
        }
    }
}
Object.extend(AjaxPro, {
    noOperation: function () {},
    onLoading: function () {},
    onError: function () {},
    onTimeout: function () {
        return true
    },
    onStateChanged: function () {},
    cryptProvider: null,
    queue: null,
    token: "",
    version: "7.7.31.1",
    ID: "AjaxPro",
    noActiveX: false,
    timeoutPeriod: 15 * 1e3,
    noUtcTime: false,
    m: {
        "\b": "\\b",
        "     ": "\\t",
        "\n": "\\n",
        "\f": "\\f",
        "\r": "\\r",
        '"': '\\"',
        "\\": "\\\\"
    },
    toJSON: function (a) {
        if (a == null) {
            return "null"
        }
        var b = [];
        var c;
        var d = a.constructor;
        if (d == Number) {
            return isFinite(a) ? a.toString() : AjaxPro.toJSON(null)
        } else {
            if (d == Boolean) {
                return a.toString()
            } else {
                if (d == String) {
                    if (/["\\\x00-\x1f]/.test(a)) {
                        a = a.replace(/([\x00-\x1f\\"])/g, function (a, b) {
                            var c = AjaxPro.m[b];
                            if (c) {
                                return c
                            }
                            c = b.charCodeAt();
                            return "\\u00" + Math.floor(c / 16).toString(16) + (c % 16).toString(16)
                        })
                    }
                    return '"' + a + '"'
                } else {
                    if (d == Array) {
                        for (c = 0; c < a.length; c++) {
                            b.push(AjaxPro.toJSON(a[c]))
                        }
                        return "[" + b.join(",") + "]"
                    } else {
                        if (d == Date) {
                            var e = {};
                            e.__type = "System.DateTime";
                            if (AjaxPro.noUtcTime == true) {
                                e.Year = a.getFullYear();
                                e.Month = a.getMonth() + 1;
                                e.Day = a.getDate();
                                e.Hour = a.getHours();
                                e.Minute = a.getMinutes();
                                e.Second = a.getSeconds();
                                e.Millisecond = a.getMilliseconds()
                            } else {
                                e.Year = a.getUTCFullYear();
                                e.Month = a.getUTCMonth() + 1;
                                e.Day = a.getUTCDate();
                                e.Hour = a.getUTCHours();
                                e.Minute = a.getUTCMinutes();
                                e.Second = a.getUTCSeconds();
                                e.Millisecond = a.getUTCMilliseconds()
                            }
                            return AjaxPro.toJSON(e)
                        }
                    }
                }
            }
        } if (typeof a.toJSON == "function") {
            return a.toJSON()
        }
        if (typeof a == "object") {
            for (var f in a) {
                if (typeof a[f] != "function") {
                    b.push('"' + f + '":' + AjaxPro.toJSON(a[f]))
                }
            }
            if (b.length > 0) {
                return "{" + b.join(",") + "}"
            }
            return "{}"
        }
        return a.toString()
    },
    dispose: function () {
        if (AjaxPro.queue != null) {
            AjaxPro.queue.dispose()
        }
    }
}, false);
addEvent(window, "unload", AjaxPro.dispose);
AjaxPro.Request = function (a) {
    this.url = a;
    this.xmlHttp = null
};
AjaxPro.Request.prototype = {
    url: null,
    callback: null,
    onLoading: AjaxPro.noOperation,
    onError: AjaxPro.noOperation,
    onTimeout: AjaxPro.noOperation,
    onStateChanged: AjaxPro.noOperation,
    args: null,
    context: null,
    isRunning: false,
    abort: function () {
        if (this.timeoutTimer != null) {
            clearTimeout(this.timeoutTimer)
        }
        if (this.xmlHttp) {
            this.xmlHttp.onreadystatechange = AjaxPro.noOperation;
            this.xmlHttp.abort()
        }
        if (this.isRunning) {
            this.isRunning = false;
            this.onLoading(false)
        }
    },
    dispose: function () {
        this.abort()
    },
    getEmptyRes: function () {
        return {
            error: null,
            value: null,
            request: {
                method: this.method,
                args: this.args
            },
            context: this.context,
            duration: this.duration
        }
    },
    endRequest: function (a) {
        this.abort();
        if (a.error != null) {
            this.onError(a.error, this)
        }
        if (typeof this.callback == "function") {
            this.callback(a, this)
        }
    },
    mozerror: function () {
        if (this.timeoutTimer != null) {
            clearTimeout(this.timeoutTimer)
        }
        var a = this.getEmptyRes();
        a.error = {
            Message: "Unknown",
            Type: "ConnectFailure",
            Status: 0
        };
        this.endRequest(a)
    },
    doStateChange: function () {
        this.onStateChanged(this.xmlHttp.readyState, this);
        if (this.xmlHttp.readyState != 4 || !this.isRunning) {
            return
        }
        this.duration = (new Date).getTime() - this.__start;
        if (this.timeoutTimer != null) {
            clearTimeout(this.timeoutTimer)
        }
        var a = this.getEmptyRes();
        if (this.xmlHttp.status == 200 && this.xmlHttp.statusText == "OK") {
            a = this.createResponse(a)
        } else {
            a = this.createResponse(a, true);
            a.error = {
                Message: this.xmlHttp.statusText,
                Type: "ConnectFailure",
                Status: this.xmlHttp.status
            }
        }
        this.endRequest(a)
    },
    createResponse: function (r, noContent) {
        if (!noContent) {
            if (typeof this.xmlHttp.responseText == "unknown") {
                r.error = {
                    Message: "XmlHttpRequest error reading property responseText.",
                    Type: "XmlHttpRequestException"
                };
                return r
            }
            var responseText = "" + this.xmlHttp.responseText;
            if (AjaxPro.cryptProvider != null && typeof AjaxPro.cryptProvider.decrypt == "function") {
                responseText = AjaxPro.cryptProvider.decrypt(responseText)
            }
            if (this.xmlHttp.getResponseHeader("Content-Type") == "text/xml") {
                r.value = this.xmlHttp.responseXML
            } else {
                if (responseText != null && responseText.trim().length > 0) {
                    r.json = responseText;
                    var v = null;
		//alert(responseText);
                    eval("v = " + responseText + ";");
                    if (v != null) {
                        if (typeof v.value != "undefined") {
                            r.value = v.value
                        } else {
                            if (typeof v.error != "undefined") {
                                r.error = v.error
                            }
                        }
                    }
                }
            }
        }
        return r
    },
    timeout: function () {
        this.duration = (new Date).getTime() - this.__start;
        var a;
        if (typeof this.onTimeout === "function") {
            a = this.onTimeout(this.duration, this)
        }
        if (typeof a == "undefined" || a != false) {
            this.abort()
        } else {
            this.timeoutTimer = setTimeout(this.timeout.bind(this), AjaxPro.timeoutPeriod)
        }
    },
    invoke: function (a, b, c, d) {
        this.__start = (new Date).getTime();
        this.xmlHttp = new XMLHttpRequest;
        this.isRunning = true;
        this.method = a;
        this.args = b;
        this.callback = c;
        this.context = d;
        var e = typeof c == "function" && c != AjaxPro.noOperation;
        if (e) {
            if (MS.Browser.isIE) {
                this.xmlHttp.onreadystatechange = this.doStateChange.bind(this)
            } else {
                this.xmlHttp.onload = this.doStateChange.bind(this);
                this.xmlHttp.onerror = this.mozerror.bind(this)
            }
            this.onLoading(true)
        }
        var f = AjaxPro.toJSON(b) + "";
        if (AjaxPro.cryptProvider != null && typeof AjaxPro.cryptProvider.encrypt == "function") {
            f = AjaxPro.cryptProvider.encrypt(f)
        }
        this.xmlHttp.open("POST", this.url, e);
        this.xmlHttp.setRequestHeader("Content-Type", "text/plain; charset=utf-8");
        this.xmlHttp.setRequestHeader("X-" + AjaxPro.ID + "-Method", a);
        if (AjaxPro.token != null && AjaxPro.token.length > 0) {
            this.xmlHttp.setRequestHeader("X-" + AjaxPro.ID + "-Token", AjaxPro.token)
        }
        this.timeoutTimer = setTimeout(this.timeout.bind(this), AjaxPro.timeoutPeriod);
        try {
            this.xmlHttp.send(f)
        } catch (g) {}
        if (!e) {
            return this.createResponse({
                error: null,
                value: null
            })
        }
        return true
    }
};
AjaxPro.RequestQueue = function (a) {
    this.queue = [];
    this.requests = [];
    this.timer = null;
    if (isNaN(a)) {
        a = 2
    }
    for (var b = 0; b < a; b++) {
        this.requests[b] = new AjaxPro.Request;
        this.requests[b].callback = function (a) {
            var b = a.context;
            a.context = b[3][1];
            b[3][0](a, this)
        };
        this.requests[b].callbackHandle = this.requests[b].callback.bind(this.requests[b])
    }
    this.processHandle = this.process.bind(this)
};
AjaxPro.RequestQueue.prototype = {
    process: function () {
        this.timer = null;
        if (this.queue.length == 0) {
            return
        }
        for (var a = 0; a < this.requests.length && this.queue.length > 0; a++) {
            if (this.requests[a].isRunning == false) {
                var b = this.queue.shift();
                this.requests[a].url = b[0];
                this.requests[a].onLoading = b[3].length > 2 && b[3][2] != null && typeof b[3][2] == "function" ? b[3][2] : AjaxPro.onLoading;
                this.requests[a].onError = b[3].length > 3 && b[3][3] != null && typeof b[3][3] == "function" ? b[3][3] : AjaxPro.onError;
                this.requests[a].onTimeout = b[3].length > 4 && b[3][4] != null && typeof b[3][4] == "function" ? b[3][4] : AjaxPro.onTimeout;
                this.requests[a].onStateChanged = b[3].length > 5 && b[3][5] != null && typeof b[3][5] == "function" ? b[3][5] : AjaxPro.onStateChanged;
                this.requests[a].invoke(b[1], b[2], this.requests[a].callbackHandle, b);
                b = null
            }
        }
        if (this.queue.length > 0 && this.timer == null) {
            this.timer = setTimeout(this.processHandle, 0)
        }
    },
    add: function (a, b, c, d) {
        this.queue.push([a, b, c, d]);
        if (this.timer == null) {
            this.timer = setTimeout(this.processHandle, 0)
        }
    },
    abort: function () {
        this.queue.length = 0;
        if (this.timer != null) {
            clearTimeout(this.timer)
        }
        this.timer = null;
        for (var a = 0; a < this.requests.length; a++) {
            if (this.requests[a].isRunning == true) {
                this.requests[a].abort()
            }
        }
    },
    dispose: function () {
        for (var a = 0; a < this.requests.length; a++) {
            var b = this.requests[a];
            b.dispose()
        }
        this.requests.clear()
    }
};
AjaxPro.queue = new AjaxPro.RequestQueue(2);
AjaxPro.AjaxClass = function (a) {
    this.url = a
};
AjaxPro.AjaxClass.prototype = {
    invoke: function (a, b, c) {
        if (c != null) {
            if (c.length != 6) {
                for (; c.length < 6;) {
                    c.push(null)
                }
            }
            if (c[0] != null && typeof c[0] == "function") {
                return AjaxPro.queue.add(this.url, a, b, c)
            }
        }
        var d = new AjaxPro.Request;
        d.url = this.url;
        return d.invoke(a, b)
    }
}
